// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AesGcmNoPadding
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Accelerate
@_exported import AesGcmNoPadding
import CommonCrypto
import Compression
import CoreFoundation
import CryptoKit
import Foundation
import MetalPerformanceShaders
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
public struct QKMRZResult {
  public let documentType: Swift.String
  public let countryCode: Swift.String
  public let surnames: Swift.String
  public let givenNames: Swift.String
  public let documentNumber: Swift.String
  public let nationalityCountryCode: Swift.String
  public let birthdate: Foundation.Date?
  public let sex: Swift.String?
  public let expiryDate: Foundation.Date?
  public let personalNumber: Swift.String
  public let personalNumber2: Swift.String?
  public let isDocumentNumberValid: Swift.Bool
  public let isBirthdateValid: Swift.Bool
  public let isExpiryDateValid: Swift.Bool
  public let isPersonalNumberValid: Swift.Bool?
  public let allCheckDigitsValid: Swift.Bool
}
public struct Entry : Swift.Equatable {
  public enum EntryType : Swift.Int {
    case file
    case directory
    case symlink
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func path(using encoding: Swift.String.Encoding) -> Swift.String
  public var path: Swift.String {
    get
  }
  public var fileAttributes: [Foundation.FileAttributeKey : Any] {
    get
  }
  public var checksum: AesGcmNoPadding.CRC32 {
    get
  }
  public var type: AesGcmNoPadding.Entry.EntryType {
    get
  }
  public var isCompressed: Swift.Bool {
    get
  }
  public var compressedSize: Swift.UInt64 {
    get
  }
  public var uncompressedSize: Swift.UInt64 {
    get
  }
  public static func == (lhs: AesGcmNoPadding.Entry, rhs: AesGcmNoPadding.Entry) -> Swift.Bool
}
extension AesGcmNoPadding.Archive {
  final public func extract(_ entry: AesGcmNoPadding.Entry, to url: Foundation.URL, bufferSize: Swift.Int = defaultReadChunkSize, skipCRC32: Swift.Bool = false, progress: Foundation.Progress? = nil) throws -> AesGcmNoPadding.CRC32
  final public func extract(_ entry: AesGcmNoPadding.Entry, bufferSize: Swift.Int = defaultReadChunkSize, skipCRC32: Swift.Bool = false, progress: Foundation.Progress? = nil, consumer: (_ data: Foundation.Data) throws -> Swift.Void) throws -> AesGcmNoPadding.CRC32
}
extension AesGcmNoPadding.Archive {
  final public func addEntry(with path: Swift.String, relativeTo baseURL: Foundation.URL, compressionMethod: AesGcmNoPadding.CompressionMethod = .none, bufferSize: Swift.Int = defaultWriteChunkSize, progress: Foundation.Progress? = nil) throws
  final public func addEntry(with path: Swift.String, fileURL: Foundation.URL, compressionMethod: AesGcmNoPadding.CompressionMethod = .none, bufferSize: Swift.Int = defaultWriteChunkSize, progress: Foundation.Progress? = nil) throws
  final public func addEntry(with path: Swift.String, type: AesGcmNoPadding.Entry.EntryType, uncompressedSize: Swift.Int64, modificationDate: Foundation.Date = Date(), permissions: Swift.UInt16? = nil, compressionMethod: AesGcmNoPadding.CompressionMethod = .none, bufferSize: Swift.Int = defaultWriteChunkSize, progress: Foundation.Progress? = nil, provider: (_ position: Swift.Int64, _ size: Swift.Int) throws -> Foundation.Data) throws
  final public func remove(_ entry: AesGcmNoPadding.Entry, bufferSize: Swift.Int = defaultReadChunkSize, progress: Foundation.Progress? = nil) throws
}
extension Foundation.Data {
  @available(*, deprecated, message: "Please use `Int64` for `size` and provider `position`.")
  public static func compress(size: Swift.Int, bufferSize: Swift.Int, provider: (_ position: Swift.Int, _ size: Swift.Int) throws -> Foundation.Data, consumer: (_ data: Foundation.Data) throws -> Swift.Void) throws -> AesGcmNoPadding.CRC32
  @available(*, deprecated, message: "Please use `Int64` for `size` and provider `position`.")
  public static func decompress(size: Swift.Int, bufferSize: Swift.Int, skipCRC32: Swift.Bool, provider: (_ position: Swift.Int, _ size: Swift.Int) throws -> Foundation.Data, consumer: (_ data: Foundation.Data) throws -> Swift.Void) throws -> AesGcmNoPadding.CRC32
}
public typealias FILEPointer = Swift.UnsafeMutablePointer<_stdio.FILE>
extension AesGcmNoPadding.AesGcmNoPaddingAlgorith {
  @objc dynamic open func zipURL(sourceURL: Foundation.URL, destinationURL: Foundation.URL) -> Swift.Bool
  @objc dynamic open func parseMrz(strings: [Swift.String]) -> AesGcmNoPadding.MRZResult?
  @objc dynamic open func scalImage(resizedImage: UIKit.UIImage, squareSize: CoreFoundation.CGSize, isQuantized: Swift.Bool) -> Foundation.Data?
}
public enum CompressionMethod : Swift.UInt16 {
  case none
  case deflate
  public init?(rawValue: Swift.UInt16)
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
public typealias CRC32 = Swift.UInt32
public typealias Consumer = (_ data: Foundation.Data) throws -> Swift.Void
public typealias Provider = (_ position: Swift.Int64, _ size: Swift.Int) throws -> Foundation.Data
extension Foundation.Data {
  public func crc32(checksum: AesGcmNoPadding.CRC32) -> AesGcmNoPadding.CRC32
  public static func compress(size: Swift.Int64, bufferSize: Swift.Int, provider: (_ position: Swift.Int64, _ size: Swift.Int) throws -> Foundation.Data, consumer: (_ data: Foundation.Data) throws -> Swift.Void) throws -> AesGcmNoPadding.CRC32
  public static func decompress(size: Swift.Int64, bufferSize: Swift.Int, skipCRC32: Swift.Bool, provider: (_ position: Swift.Int64, _ size: Swift.Int) throws -> Foundation.Data, consumer: (_ data: Foundation.Data) throws -> Swift.Void) throws -> AesGcmNoPadding.CRC32
}
extension AesGcmNoPadding.Archive {
  final public var data: Foundation.Data? {
    get
  }
}
public let defaultReadChunkSize: Swift.Int
public let defaultWriteChunkSize: Swift.Int
public let defaultFilePermissions: Swift.UInt16
public let defaultDirectoryPermissions: Swift.UInt16
final public class Archive : Swift.Sequence {
  public enum ArchiveError : Swift.Error {
    case unreadableArchive
    case unwritableArchive
    case invalidEntryPath
    case invalidCompressionMethod
    case invalidCRC32
    case cancelledOperation
    case invalidBufferSize
    case invalidEntrySize
    case invalidLocalHeaderDataOffset
    case invalidLocalHeaderSize
    case invalidCentralDirectoryOffset
    case invalidCentralDirectorySize
    case invalidCentralDirectoryEntryCount
    case missingEndOfCentralDirectoryRecord
    public static func == (a: AesGcmNoPadding.Archive.ArchiveError, b: AesGcmNoPadding.Archive.ArchiveError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum AccessMode : Swift.UInt {
    case create
    case read
    case update
    public init?(rawValue: Swift.UInt)
    public typealias RawValue = Swift.UInt
    public var rawValue: Swift.UInt {
      get
    }
  }
  final public let url: Foundation.URL
  final public let accessMode: AesGcmNoPadding.Archive.AccessMode
  public init?(url: Foundation.URL, accessMode mode: AesGcmNoPadding.Archive.AccessMode, preferredEncoding: Swift.String.Encoding? = nil)
  public init?(data: Foundation.Data = Data(), accessMode mode: AesGcmNoPadding.Archive.AccessMode, preferredEncoding: Swift.String.Encoding? = nil)
  @objc deinit
  final public func makeIterator() -> Swift.AnyIterator<AesGcmNoPadding.Entry>
  final public subscript(path: Swift.String) -> AesGcmNoPadding.Entry? {
    get
  }
  public typealias Element = AesGcmNoPadding.Entry
  public typealias Iterator = Swift.AnyIterator<AesGcmNoPadding.Entry>
}
@_inheritsConvenienceInitializers @objc open class AesGcmNoPaddingAlgorith : ObjectiveC.NSObject {
  @objc open func decryptWith(uniqueKeyId: Swift.String, publicKey: Swift.String, encryptedData: Foundation.Data) -> Foundation.Data?
  @objc override dynamic public init()
  @objc deinit
}
extension AesGcmNoPadding.AesGcmNoPaddingAlgorith {
  @objc dynamic open func decryptRequestWithData(encryptedPayload: Foundation.Data, secret: Swift.String, knownSecret: Swift.String) -> Foundation.Data
  @objc dynamic open func decryptRequest(encryptedPayload: Swift.String, secret: Swift.String, knownSecret: Swift.String) -> Swift.String
  @objc dynamic open func encryptRequest(payload: Swift.String, secret: Swift.String, knownSecret: Swift.String) -> Swift.String
}
public class QKMRZParser {
  public init(ocrCorrection: Swift.Bool = false)
  public func parse(mrzLines: [Swift.String]) -> AesGcmNoPadding.QKMRZResult?
  public func parse(mrzString: Swift.String) -> AesGcmNoPadding.QKMRZResult?
  @objc deinit
}
extension AesGcmNoPadding.Archive {
  final public func totalUnitCountForRemoving(_ entry: AesGcmNoPadding.Entry) -> Swift.Int64
  final public func totalUnitCountForReading(_ entry: AesGcmNoPadding.Entry) -> Swift.Int64
  final public func totalUnitCountForAddingItem(at url: Foundation.URL) -> Swift.Int64
}
@_hasMissingDesignatedInitializers @objc public class MRZResult : ObjectiveC.NSObject {
  @objc final public let ocrText: Swift.String
  @objc final public let documentType: Swift.String
  @objc final public let countryCode: Swift.String
  @objc final public let surnames: Swift.String
  @objc final public let givenNames: Swift.String
  @objc final public let documentNumber: Swift.String
  @objc final public let nationality: Swift.String
  @objc final public let birthDate: Foundation.Date?
  @objc final public let sex: Swift.String?
  @objc final public let expiryDate: Foundation.Date?
  @objc final public let personalNumber: Swift.String
  @objc final public let personalNumber2: Swift.String?
  @objc final public let isDocumentNumberValid: Swift.Bool
  @objc final public let isBirthDateValid: Swift.Bool
  @objc final public let isExpiryDateValid: Swift.Bool
  @objc final public let isPersonalNumberValid: Swift.Bool
  @objc final public let allCheckDigitsValid: Swift.Bool
  @objc final public let lineCounts: [Swift.Int]
  @objc public var dictionary: [Swift.String : Swift.String] {
    @objc get
  }
  public var birthDateString: Swift.String? {
    get
  }
  public var expiryDateString: Swift.String? {
    get
  }
  @objc deinit
}
extension AesGcmNoPadding.Archive {
  @available(*, deprecated, message: "Please use `Int` for `bufferSize`.")
  final public func extract(_ entry: AesGcmNoPadding.Entry, to url: Foundation.URL, bufferSize: Swift.UInt32, skipCRC32: Swift.Bool = false, progress: Foundation.Progress? = nil) throws -> AesGcmNoPadding.CRC32
  @available(*, deprecated, message: "Please use `Int` for `bufferSize`.")
  final public func extract(_ entry: AesGcmNoPadding.Entry, bufferSize: Swift.UInt32, skipCRC32: Swift.Bool = false, progress: Foundation.Progress? = nil, consumer: (_ data: Foundation.Data) throws -> Swift.Void) throws -> AesGcmNoPadding.CRC32
}
extension AesGcmNoPadding.AesGcmNoPaddingAlgorith {
  @objc dynamic open func cover(plainText: Swift.String, salt: Swift.String, key: Swift.String) -> Swift.String
  @objc dynamic open func deCover(coveredString: Swift.String, salt: Swift.String, key: Swift.String) -> Swift.String
  @objc dynamic open func generateRanbomKey() -> Swift.String
}
extension AesGcmNoPadding.Archive {
  @available(*, deprecated, message: "Please use `Int` for `bufferSize`.")
  final public func addEntry(with path: Swift.String, relativeTo baseURL: Foundation.URL, compressionMethod: AesGcmNoPadding.CompressionMethod = .none, bufferSize: Swift.UInt32, progress: Foundation.Progress? = nil) throws
  @available(*, deprecated, message: "Please use `Int` for `bufferSize`.")
  final public func addEntry(with path: Swift.String, fileURL: Foundation.URL, compressionMethod: AesGcmNoPadding.CompressionMethod = .none, bufferSize: Swift.UInt32, progress: Foundation.Progress? = nil) throws
  @available(*, deprecated, message: "Please use `Int64` for `uncompressedSize` and provider `position`. `Int` for `bufferSize`.")
  final public func addEntry(with path: Swift.String, type: AesGcmNoPadding.Entry.EntryType, uncompressedSize: Swift.UInt32, modificationDate: Foundation.Date = Date(), permissions: Swift.UInt16? = nil, compressionMethod: AesGcmNoPadding.CompressionMethod = .none, bufferSize: Swift.Int = defaultWriteChunkSize, progress: Foundation.Progress? = nil, provider: (_ position: Swift.Int, _ size: Swift.Int) throws -> Foundation.Data) throws
  @available(*, deprecated, message: "Please use `Int` for `bufferSize`.")
  final public func remove(_ entry: AesGcmNoPadding.Entry, bufferSize: Swift.UInt32, progress: Foundation.Progress? = nil) throws
}
extension Foundation.FileManager {
  public func zipItem(at sourceURL: Foundation.URL, to destinationURL: Foundation.URL, shouldKeepParent: Swift.Bool = true, compressionMethod: AesGcmNoPadding.CompressionMethod = .none, progress: Foundation.Progress? = nil) throws
  public func unzipItem(at sourceURL: Foundation.URL, to destinationURL: Foundation.URL, skipCRC32: Swift.Bool = false, progress: Foundation.Progress? = nil, preferredEncoding: Swift.String.Encoding? = nil) throws
}
extension Foundation.URL {
  public func isContained(in parentDirectoryURL: Foundation.URL) -> Swift.Bool
}
public class MetalBilinearScaler {
  public init()
  @objc deinit
}
extension AesGcmNoPadding.Entry.EntryType : Swift.Equatable {}
extension AesGcmNoPadding.Entry.EntryType : Swift.Hashable {}
extension AesGcmNoPadding.Entry.EntryType : Swift.RawRepresentable {}
extension AesGcmNoPadding.CompressionMethod : Swift.Equatable {}
extension AesGcmNoPadding.CompressionMethod : Swift.Hashable {}
extension AesGcmNoPadding.CompressionMethod : Swift.RawRepresentable {}
extension AesGcmNoPadding.Archive.ArchiveError : Swift.Equatable {}
extension AesGcmNoPadding.Archive.ArchiveError : Swift.Hashable {}
extension AesGcmNoPadding.Archive.AccessMode : Swift.Equatable {}
extension AesGcmNoPadding.Archive.AccessMode : Swift.Hashable {}
extension AesGcmNoPadding.Archive.AccessMode : Swift.RawRepresentable {}
